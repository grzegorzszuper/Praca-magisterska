---
- name: Uruchomienie PostgreSQL 13 w kontenerze Docker
  hosts: all
  become: yes

  tasks:
    - name: Zainstaluj Docker
      command: yum install -y docker

    - name: Uruchom i włącz Docker
      service:
        name: docker
        state: started
        enabled: true

    - name: Dodaj ec2-user do grupy docker
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Pobierz obraz PostgreSQL 13
      command: docker pull postgres:13

    - name: Usuń istniejący kontener pg-docker (jeśli istnieje)
      shell: docker rm -f pg-docker || true

    - name: Uruchom kontener PostgreSQL
      command: >
        docker run -d --name pg-docker
        -e POSTGRES_PASSWORD=example
        -e POSTGRES_DB=benchmarkdb
        -p 5433:5433
        postgres:13

    - name: Poczekaj na uruchomienie kontenera PostgreSQL
      wait_for:
        port: 5433
        delay: 10

    - name: Zainstaluj klienta PostgreSQL i pgbench
      command: yum install -y postgresql postgresql-contrib

    - name: Dodatkowe testy pgbench - warianty docker
      block:
        - name: Inicjalizuj pgbench - {{ label }}
          shell: >
            docker exec -e PGPASSWORD=example pg-docker
            pgbench -i -s {{ scale }} -U postgres benchmarkdb

        - name: Uruchom test pgbench - {{ label }}
          shell: >
            docker exec -e PGPASSWORD=example pg-docker
            pgbench -c {{ clients }} -j {{ threads }} -T 60 -U postgres benchmarkdb >
            /home/ec2-user/pg_result_{{ label }}.log

        - name: Wyślij log do S3 - {{ label }}
          command: >
            aws s3 cp /home/ec2-user/pg_result_{{ label }}.log
            s3://thesis-logs-dev/postgres/output_pg_docker_{{ label }}.log
      loop:
        - { label: "1c_1j_s1", clients: 1, threads: 1, scale: 1 }
        - { label: "5c_2j_s1", clients: 5, threads: 2, scale: 1 }
        - { label: "10c_4j_s1", clients: 10, threads: 4, scale: 1 }
        - { label: "20c_4j_s1", clients: 20, threads: 4, scale: 1 }
        - { label: "50c_8j_s1", clients: 50, threads: 8, scale: 1 }
        - { label: "1c_1j_s50", clients: 1, threads: 1, scale: 50 }
        - { label: "5c_2j_s50", clients: 5, threads: 2, scale: 50 }
        - { label: "10c_4j_s50", clients: 10, threads: 4, scale: 50 }
        - { label: "20c_4j_s50", clients: 20, threads: 4, scale: 50 }
        - { label: "50c_8j_s50", clients: 50, threads: 8, scale: 50 }
        - { label: "1c_1j_s100", clients: 1, threads: 1, scale: 100 }
        - { label: "5c_2j_s100", clients: 5, threads: 2, scale: 100 }
        - { label: "10c_4j_s100", clients: 10, threads: 4, scale: 100 }
        - { label: "20c_4j_s100", clients: 20, threads: 4, scale: 100 }
        - { label: "50c_8j_s100", clients: 50, threads: 8, scale: 100 }
